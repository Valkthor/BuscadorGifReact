{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,8BACI,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAIN,GACRA,EAAWO,OAAOC,OAAS,IAE3BV,GAAe,SAAAW,GAAI,OAAMT,GAAN,mBAAqBS,OACxCR,EAAc,MAOd,SACI,uBAAQS,KAAK,OAAOC,YAAY,oBAE5BC,MAAUZ,EACVa,SAtBU,SAACV,GAEvBF,EAAcE,EAAEW,OAAOF,e,+BCTlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAGbC,EAHa,iDAGoCC,UAAWH,GAH/C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAIDC,EAAQD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdvB,kBAiBZM,GAjBY,4CAAH,sDCAPO,EAAe,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAGvC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAON,IACxB,4BAAKA,QCHJO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAEvB,ECHwB,SAAEA,GAC1B,MAA0BjB,mBAAS,CAC/BwB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAZIC,qBAAU,WACNxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAAEpB,IAGFqB,EDjB2BK,CAAc1B,GAAlCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAYtB,OACI,qCAEA,6BAAMpB,IAGN,sBAAKgB,UAAU,YAAf,UAEMI,GAAW,wCAGTP,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADGA,EAAIC,cEKpBgB,MAjCd,SAAsBC,GAEnB,IAEA,EAAoC7C,mBAFhB,CAAE,YAEtB,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAQA,OACI,gCACI,8CACA,cAAE,EAAF,CAAcA,cAAiBA,IAC/B,uBAEA,6BAGQ+C,EAAWpB,KAAM,SAACT,GAAD,OACb,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCnBlC8B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c622c59c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport  PropTypes  from \"prop-types\";\r\n\r\n\r\n// se obtiene la funcion de set que esta en gifExpertApp\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(inputValue);\r\n        if (inputValue.trim().length > 2) {\r\n            // se agrega a las categorias\r\n            setCategories( cats => [ inputValue, ...cats]);\r\n            setInputValue(\"\");\r\n        }\r\n        \r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <form onSubmit={ handleSubmit }>\r\n                <input  type=\"text\" placeholder=\"Ingrese categoria\"\r\n\r\n                    value = { inputValue }\r\n                    onChange={ handleInputChange }  \r\n                />\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async ( category ) => {\r\n\r\n    // consulta get asincrona\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=bjNfOnn51RkUAE4qr8sg8VyI1OvBM7uv`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    // se lee la respuesta y retorna objeto con los datos que se necesitan\r\n\r\n    const gifs =  data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            // si trae el elemento lo carga\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n\r\n}\r\n","import React from 'react'\r\n\r\nexport const GiftGridItem = ( { id, title, url } ) => {\r\n\r\n    //console.log( id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\" >\r\n            <img src={ url } alt={  title } />\r\n            <p>{ title }</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n","//import React, { useEffect, useState } from 'react'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GiftGridItem } from './GiftGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    const { data: images, loading } = useFetchGifs( category);\r\n\r\n    //const [images, setimages] = useState([]);\r\n    \r\n    // esto es para que la peticion de ajax se ejecute solo una vez\r\n    // useEffect(() => {\r\n    //     getGifs( category)\r\n    //         .then( imgs => setimages(imgs) ) \r\n\r\n    // }, [ category ])\r\n\r\n\r\n    return (\r\n        <>\r\n        \r\n        <h3>{ category }</h3>\r\n\r\n\r\n        <div className=\"card-grid\">\r\n            \r\n            { loading && <p>Loading</p> }\r\n\r\n            {\r\n                images.map( (img) => (\r\n                    <GiftGridItem \r\n                        key= { img.id }   \r\n                        {...img}\r\n                         \r\n                    />\r\n                ))\r\n            }\r\n                \r\n\r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n\r\n    });\r\n    \r\n        // esto es para que la peticion de ajax se ejecute solo una vez\r\n        useEffect(() => {\r\n            getGifs( category)\r\n                .then( imgs => {\r\n                    setstate({\r\n                        data: imgs, \r\n                        loading: false\r\n                    })\r\n                } ) \r\n    \r\n        }, [ category ])\r\n\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n function GifExpertApp(props) {\r\n\r\n    const categoriesX = [ \"Rurouni\"];\r\n\r\n    const [categories, setCategories] = useState(categoriesX)\r\n\r\n    // const handleAdd = () => {\r\n    //     //setCategories ( [...categories, \"Hunter X\"]);\r\n    //     setCategories( cats => [...cats, \"Hunter X\"]);\r\n    // }\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            < AddCategory setCategories= { setCategories } />\r\n            < hr />\r\n            {/* <button onClick={ handleAdd } >Agregar +</button> */}\r\n            <ol>\r\n\r\n                {\r\n                    categories.map ( (category ) => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                            />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n//import App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n//reportWebVitals();\n"],"sourceRoot":""}